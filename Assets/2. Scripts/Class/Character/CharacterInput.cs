//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/2. Scripts/Class/Character/CharacterInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterInput"",
    ""maps"": [
        {
            ""name"": ""CharacterAction"",
            ""id"": ""cd490b2a-d08a-4b58-84c0-50417d7d2ad7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ffd488f6-97f5-4975-a90d-151421ca74bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""f85cccf4-5180-4065-b0f4-a8ee7d766947"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillActive"",
                    ""type"": ""Button"",
                    ""id"": ""3ddf246f-e0d7-4518-87fc-5fc88e06295b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""19fad050-74da-4557-a1e3-b86d80323e24"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""89ce4d4e-0d5f-4ef8-b85c-c0e1eceaa4bb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4a5a653d-fefb-4608-acf7-1eb9a4322859"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a82f7d0-9bf0-47cc-99e0-f24e05d8acd5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d6cdb8e0-2a5e-483d-8c78-318842d11ff4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""956df673-0036-41c7-850c-ffcd7a5f44a0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""434cd4b7-96e0-445c-b145-2c112a9de079"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7025203c-9758-4cf4-b0ba-ca37d1916a8d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillActive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2dffa66-5e44-4ed2-8727-535ebebdf8c9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New Control Scheme"",
            ""bindingGroup"": ""New Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CharacterAction
        m_CharacterAction = asset.FindActionMap("CharacterAction", throwIfNotFound: true);
        m_CharacterAction_Move = m_CharacterAction.FindAction("Move", throwIfNotFound: true);
        m_CharacterAction_Attack = m_CharacterAction.FindAction("Attack", throwIfNotFound: true);
        m_CharacterAction_SkillActive = m_CharacterAction.FindAction("SkillActive", throwIfNotFound: true);
        m_CharacterAction_Aim = m_CharacterAction.FindAction("Aim", throwIfNotFound: true);
    }

    ~@CharacterInput()
    {
        UnityEngine.Debug.Assert(!m_CharacterAction.enabled, "This will cause a leak and performance issues, CharacterInput.CharacterAction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterAction
    private readonly InputActionMap m_CharacterAction;
    private List<ICharacterActionActions> m_CharacterActionActionsCallbackInterfaces = new List<ICharacterActionActions>();
    private readonly InputAction m_CharacterAction_Move;
    private readonly InputAction m_CharacterAction_Attack;
    private readonly InputAction m_CharacterAction_SkillActive;
    private readonly InputAction m_CharacterAction_Aim;
    public struct CharacterActionActions
    {
        private @CharacterInput m_Wrapper;
        public CharacterActionActions(@CharacterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterAction_Move;
        public InputAction @Attack => m_Wrapper.m_CharacterAction_Attack;
        public InputAction @SkillActive => m_Wrapper.m_CharacterAction_SkillActive;
        public InputAction @Aim => m_Wrapper.m_CharacterAction_Aim;
        public InputActionMap Get() { return m_Wrapper.m_CharacterAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActionActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterActionActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterActionActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SkillActive.started += instance.OnSkillActive;
            @SkillActive.performed += instance.OnSkillActive;
            @SkillActive.canceled += instance.OnSkillActive;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
        }

        private void UnregisterCallbacks(ICharacterActionActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SkillActive.started -= instance.OnSkillActive;
            @SkillActive.performed -= instance.OnSkillActive;
            @SkillActive.canceled -= instance.OnSkillActive;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
        }

        public void RemoveCallbacks(ICharacterActionActions instance)
        {
            if (m_Wrapper.m_CharacterActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterActionActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterActionActions @CharacterAction => new CharacterActionActions(this);
    private int m_NewControlSchemeSchemeIndex = -1;
    public InputControlScheme NewControlSchemeScheme
    {
        get
        {
            if (m_NewControlSchemeSchemeIndex == -1) m_NewControlSchemeSchemeIndex = asset.FindControlSchemeIndex("New Control Scheme");
            return asset.controlSchemes[m_NewControlSchemeSchemeIndex];
        }
    }
    public interface ICharacterActionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSkillActive(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
